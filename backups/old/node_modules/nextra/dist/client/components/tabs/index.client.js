"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import { Tab as HeadlessTab, TabGroup, TabList, TabPanel, TabPanels } from "@headlessui/react";
import cn from "clsx";
import { Fragment, useEffect, useRef, useState } from "react";
import { useHash } from "../../hooks/use-hash.js";
function isTabObjectItem(item) {
  return !!item && typeof item === "object" && "label" in item;
}
const Tabs = (t0) => {
  const $ = _c(30);
  const {
    items,
    children,
    storageKey,
    defaultIndex: t1,
    selectedIndex: _selectedIndex,
    onChange,
    className,
    tabClassName
  } = t0;
  const defaultIndex = t1 === void 0 ? 0 : t1;
  const [selectedIndex, setSelectedIndex] = useState(defaultIndex);
  const hash = useHash();
  const tabPanelsRef = useRef(null);
  let t2;
  let t3;
  if ($[0] !== _selectedIndex) {
    t2 = () => {
      if (_selectedIndex !== void 0) {
        setSelectedIndex(_selectedIndex);
      }
    };
    t3 = [_selectedIndex];
    $[0] = _selectedIndex;
    $[1] = t2;
    $[2] = t3;
  } else {
    t2 = $[1];
    t3 = $[2];
  }
  useEffect(t2, t3);
  let t4;
  let t5;
  if ($[3] !== hash) {
    t4 = () => {
      if (!hash) {
        return;
      }
      const tabPanel = tabPanelsRef.current.querySelector(`[role=tabpanel]:has([id="${hash}"])`);
      if (!tabPanel) {
        return;
      }
      for (const [index, el] of Object.entries(tabPanelsRef.current.children)) {
        if (el === tabPanel) {
          setSelectedIndex(Number(index));
          location.hash = "";
          requestAnimationFrame(() => {
            location.hash = `#${hash}`;
          });
        }
      }
    };
    t5 = [hash];
    $[3] = hash;
    $[4] = t4;
    $[5] = t5;
  } else {
    t4 = $[4];
    t5 = $[5];
  }
  useEffect(t4, t5);
  let t6;
  if ($[6] !== storageKey) {
    t6 = () => {
      if (!storageKey) {
        return;
      }
      const fn = function fn2(event) {
        if (event.key === storageKey) {
          setSelectedIndex(Number(event.newValue));
        }
      };
      const index_0 = Number(localStorage.getItem(storageKey));
      setSelectedIndex(Number.isNaN(index_0) ? 0 : index_0);
      window.addEventListener("storage", fn);
      return () => {
        window.removeEventListener("storage", fn);
      };
    };
    $[6] = storageKey;
    $[7] = t6;
  } else {
    t6 = $[7];
  }
  let t7;
  if ($[8] === Symbol.for("react.memo_cache_sentinel")) {
    t7 = [];
    $[8] = t7;
  } else {
    t7 = $[8];
  }
  useEffect(t6, t7);
  let t8;
  if ($[9] !== onChange || $[10] !== storageKey) {
    t8 = (index_1) => {
      if (storageKey) {
        const newValue = String(index_1);
        localStorage.setItem(storageKey, newValue);
        window.dispatchEvent(new StorageEvent("storage", {
          key: storageKey,
          newValue
        }));
        return;
      }
      setSelectedIndex(index_1);
      onChange?.(index_1);
    };
    $[9] = onChange;
    $[10] = storageKey;
    $[11] = t8;
  } else {
    t8 = $[11];
  }
  const handleChange = t8;
  let t9;
  if ($[12] !== className) {
    t9 = (args) => cn("nextra-scrollbar x:overflow-x-auto x:overscroll-x-contain x:overflow-y-hidden", "x:mt-4 x:flex x:w-full x:gap-2 x:border-b x:border-gray-200 x:pb-px x:dark:border-neutral-800", "x:focus-visible:nextra-focus", typeof className === "function" ? className(args) : className);
    $[12] = className;
    $[13] = t9;
  } else {
    t9 = $[13];
  }
  let t10;
  if ($[14] !== items || $[15] !== tabClassName) {
    let t112;
    if ($[17] !== tabClassName) {
      t112 = (item, index_2) => /* @__PURE__ */ jsx(HeadlessTab, { disabled: isTabObjectItem(item) && item.disabled, className: (args_0) => {
        const {
          selected,
          disabled,
          hover,
          focus
        } = args_0;
        return cn(focus && "x:nextra-focus x:ring-inset", "x:whitespace-nowrap x:cursor-pointer", "x:rounded-t x:p-2 x:font-medium x:leading-5 x:transition-colors", "x:-mb-0.5 x:select-none x:border-b-2", selected ? "x:border-current x:outline-none" : hover ? "x:border-gray-200 x:dark:border-neutral-800" : "x:border-transparent", selected ? "x:text-primary-600" : disabled ? "x:text-gray-400 x:dark:text-neutral-600 x:pointer-events-none" : hover ? "x:text-black x:dark:text-white" : "x:text-gray-600 x:dark:text-gray-200", typeof tabClassName === "function" ? tabClassName(args_0) : tabClassName);
      }, children: isTabObjectItem(item) ? item.label : item }, index_2);
      $[17] = tabClassName;
      $[18] = t112;
    } else {
      t112 = $[18];
    }
    t10 = items.map(t112);
    $[14] = items;
    $[15] = tabClassName;
    $[16] = t10;
  } else {
    t10 = $[16];
  }
  let t11;
  if ($[19] !== t10 || $[20] !== t9) {
    t11 = /* @__PURE__ */ jsx(TabList, { className: t9, children: t10 });
    $[19] = t10;
    $[20] = t9;
    $[21] = t11;
  } else {
    t11 = $[21];
  }
  let t12;
  if ($[22] !== children) {
    t12 = /* @__PURE__ */ jsx(TabPanels, { ref: tabPanelsRef, children });
    $[22] = children;
    $[23] = t12;
  } else {
    t12 = $[23];
  }
  let t13;
  if ($[24] !== defaultIndex || $[25] !== handleChange || $[26] !== selectedIndex || $[27] !== t11 || $[28] !== t12) {
    t13 = /* @__PURE__ */ jsxs(TabGroup, { selectedIndex, defaultIndex, onChange: handleChange, as: Fragment, children: [
      t11,
      t12
    ] });
    $[24] = defaultIndex;
    $[25] = handleChange;
    $[26] = selectedIndex;
    $[27] = t11;
    $[28] = t12;
    $[29] = t13;
  } else {
    t13 = $[29];
  }
  return t13;
};
const Tab = (t0) => {
  const $ = _c(12);
  let children;
  let className;
  let props;
  let t1;
  if ($[0] !== t0) {
    ({
      children,
      unmount: t1,
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = props;
    $[4] = t1;
  } else {
    children = $[1];
    className = $[2];
    props = $[3];
    t1 = $[4];
  }
  const unmount = t1 === void 0 ? false : t1;
  let t2;
  if ($[5] !== className) {
    t2 = (args) => cn("x:rounded x:mt-6", args.focus && "x:nextra-focus", typeof className === "function" ? className(args) : className);
    $[5] = className;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== children || $[8] !== props || $[9] !== t2 || $[10] !== unmount) {
    t3 = /* @__PURE__ */ jsx(TabPanel, { ...props, unmount, className: t2, children });
    $[7] = children;
    $[8] = props;
    $[9] = t2;
    $[10] = unmount;
    $[11] = t3;
  } else {
    t3 = $[11];
  }
  return t3;
};
export {
  Tab,
  Tabs
};
