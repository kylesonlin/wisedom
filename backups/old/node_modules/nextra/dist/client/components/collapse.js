"use client";
import { jsx } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import cn from "clsx";
import { Children, useEffect, useRef, useState } from "react";
const Collapse = (t0) => {
  const $ = _c(24);
  const {
    className,
    children,
    isOpen,
    horizontal: t1,
    openDuration: t2,
    closeDuration: t3
  } = t0;
  const horizontal = t1 === void 0 ? false : t1;
  const openDuration = t2 === void 0 ? 500 : t2;
  const closeDuration = t3 === void 0 ? 300 : t3;
  const containerRef = useRef(null);
  const [initialOpen] = useState(isOpen);
  const animationRef = useRef(0);
  const initialRender = useRef(true);
  let t4;
  let t5;
  if ($[0] !== horizontal || $[1] !== isOpen || $[2] !== openDuration) {
    t4 = () => {
      const animation = animationRef.current;
      const container = containerRef.current;
      if (animation) {
        clearTimeout(animation);
        animationRef.current = 0;
      }
      if (initialRender.current) {
        return;
      }
      const child = container.children[0];
      if (horizontal) {
        child.style.width = `${child.clientWidth}px`;
        container.style.width = `${child.clientWidth}px`;
      } else {
        container.style.height = `${child.clientHeight}px`;
      }
      if (isOpen) {
        animationRef.current = window.setTimeout(() => {
          container.style.removeProperty("height");
        }, openDuration);
      } else {
        requestAnimationFrame(() => {
          if (horizontal) {
            container.style.width = "0";
          } else {
            container.style.height = "0";
          }
        });
      }
    };
    t5 = [horizontal, isOpen, openDuration];
    $[0] = horizontal;
    $[1] = isOpen;
    $[2] = openDuration;
    $[3] = t4;
    $[4] = t5;
  } else {
    t4 = $[3];
    t5 = $[4];
  }
  useEffect(t4, t5);
  let t6;
  let t7;
  if ($[5] !== horizontal || $[6] !== isOpen) {
    t6 = () => {
      if (isOpen || !horizontal) {
        initialRender.current = false;
      }
    };
    t7 = [horizontal, isOpen];
    $[5] = horizontal;
    $[6] = isOpen;
    $[7] = t6;
    $[8] = t7;
  } else {
    t6 = $[7];
    t7 = $[8];
  }
  useEffect(t6, t7);
  let t8;
  if ($[9] !== children) {
    t8 = Children.count(children) === 1 && children && typeof children === "object" && "type" in children ? children : /* @__PURE__ */ jsx("div", { children });
    $[9] = children;
    $[10] = t8;
  } else {
    t8 = $[10];
  }
  const newChildren = t8;
  const t9 = isOpen ? "x:opacity-100" : "x:opacity-0 x:overflow-hidden";
  let t10;
  if ($[11] !== className || $[12] !== t9) {
    t10 = cn("x:transform-gpu x:transition-all x:ease-in-out x:motion-reduce:transition-none", t9, className);
    $[11] = className;
    $[12] = t9;
    $[13] = t10;
  } else {
    t10 = $[13];
  }
  let t11;
  if ($[14] !== horizontal || $[15] !== initialOpen) {
    t11 = initialOpen || horizontal ? void 0 : {
      height: 0
    };
    $[14] = horizontal;
    $[15] = initialOpen;
    $[16] = t11;
  } else {
    t11 = $[16];
  }
  const t12 = (isOpen ? openDuration : closeDuration) + "ms";
  let t13;
  if ($[17] !== t11 || $[18] !== t12) {
    t13 = {
      ...t11,
      transitionDuration: t12
    };
    $[17] = t11;
    $[18] = t12;
    $[19] = t13;
  } else {
    t13 = $[19];
  }
  let t14;
  if ($[20] !== newChildren || $[21] !== t10 || $[22] !== t13) {
    t14 = /* @__PURE__ */ jsx("div", { ref: containerRef, className: t10, style: t13, children: newChildren });
    $[20] = newChildren;
    $[21] = t10;
    $[22] = t13;
    $[23] = t14;
  } else {
    t14 = $[23];
  }
  return t14;
};
export {
  Collapse
};
