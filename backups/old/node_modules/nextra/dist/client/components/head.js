import { jsx, jsxs } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import { z } from "zod";
import { fromZodError } from "zod-validation-error";
const darkLightSchema = z.union([z.number(), z.strictObject({
  dark: z.number(),
  light: z.number()
})]).transform((v) => typeof v === "number" ? {
  dark: v,
  light: v
} : v);
function hexToRgb(hex) {
  hex = hex.slice(1);
  if (hex.length === 3) {
    hex = hex.split("").map((char) => char + char).join("");
  }
  const bigint = Number.parseInt(hex, 16);
  const r = bigint >> 16 & 255;
  const g = bigint >> 8 & 255;
  const b = bigint & 255;
  return `${r},${g},${b}`;
}
const RGB_RE = /^rgb\((?<rgb>.*?)\)$/;
const HEX_RE = /^#(?<hex>[0-9a-f]{3,6})$/i;
const colorSchema = z.string().refine((str) => {
  if (HEX_RE.test(str) || RGB_RE.test(str)) {
    return true;
  }
  throw new Error("Color format should be in HEX or RGB format. E.g. #000, #112233 or rgb(255,255,255)");
}).transform((value) => {
  if (value.startsWith("#")) {
    return hexToRgb(value);
  }
  const rgb = value.match(RGB_RE)?.groups.rgb;
  if (rgb) {
    return rgb.replaceAll(" ", "");
  }
  return value;
});
const headSchema = z.strictObject({
  color: z.strictObject({
    hue: darkLightSchema.default({
      dark: 204,
      light: 212
    }),
    saturation: darkLightSchema.default(100),
    lightness: darkLightSchema.default({
      dark: 55,
      light: 45
    })
  }).default({}),
  faviconGlyph: z.string().optional(),
  backgroundColor: z.strictObject({
    dark: colorSchema.default("rgb(17,17,17)"),
    light: colorSchema.default("rgb(250,250,250)")
  }).default({})
});
const Head = (t0) => {
  const $ = _c(21);
  let children;
  let props;
  if ($[0] !== t0) {
    ({
      children,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = props;
  } else {
    children = $[1];
    props = $[2];
  }
  let data;
  if ($[3] !== props) {
    const {
      data: t12,
      error
    } = headSchema.safeParse(props);
    data = t12;
    if (error) {
      throw fromZodError(error);
    }
    $[3] = props;
    $[4] = data;
  } else {
    data = $[4];
  }
  const {
    color,
    backgroundColor,
    faviconGlyph
  } = data;
  const t1 = `
:root {
  --nextra-primary-hue: ${color.hue.light}deg;
  --nextra-primary-saturation: ${color.saturation.light}%;
  --nextra-primary-lightness: ${color.lightness.light}%;
  --nextra-bg: ${backgroundColor.light};
  --nextra-content-width: 90rem;
}
.dark {
  --nextra-primary-hue: ${color.hue.dark}deg;
  --nextra-primary-saturation: ${color.saturation.dark}%;
  --nextra-primary-lightness: ${color.lightness.dark}%;
  --nextra-bg: ${backgroundColor.dark};
}
::selection {
  background: hsla(var(--nextra-primary-hue),var(--nextra-primary-saturation),var(--nextra-primary-lightness),.3);
}
html {
  background: rgb(var(--nextra-bg));
}
`;
  let t2;
  if ($[5] !== t1) {
    t2 = t1.trim();
    $[5] = t1;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  const style = t2;
  let t3;
  if ($[7] !== style) {
    t3 = /* @__PURE__ */ jsx("style", { children: style });
    $[7] = style;
    $[8] = t3;
  } else {
    t3 = $[8];
  }
  const t4 = `rgb(${backgroundColor.light})`;
  let t5;
  if ($[9] !== t4) {
    t5 = /* @__PURE__ */ jsx("meta", { name: "theme-color", media: "(prefers-color-scheme: light)", content: t4 });
    $[9] = t4;
    $[10] = t5;
  } else {
    t5 = $[10];
  }
  const t6 = `rgb(${backgroundColor.dark})`;
  let t7;
  if ($[11] !== t6) {
    t7 = /* @__PURE__ */ jsx("meta", { name: "theme-color", media: "(prefers-color-scheme: dark)", content: t6 });
    $[11] = t6;
    $[12] = t7;
  } else {
    t7 = $[12];
  }
  let t8;
  if ($[13] !== faviconGlyph) {
    t8 = faviconGlyph && /* @__PURE__ */ jsx("link", { rel: "icon", href: `data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text x='50' y='.9em' font-size='90' text-anchor='middle'>${faviconGlyph}</text><style>svg{font-family:system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji"}@media(prefers-color-scheme:dark){svg{fill:#fff}}</style></svg>` });
    $[13] = faviconGlyph;
    $[14] = t8;
  } else {
    t8 = $[14];
  }
  let t9;
  if ($[15] !== children || $[16] !== t3 || $[17] !== t5 || $[18] !== t7 || $[19] !== t8) {
    t9 = /* @__PURE__ */ jsxs("head", { children: [
      children,
      t3,
      t5,
      t7,
      t8
    ] });
    $[15] = children;
    $[16] = t3;
    $[17] = t5;
    $[18] = t7;
    $[19] = t8;
    $[20] = t9;
  } else {
    t9 = $[20];
  }
  return t9;
};
export {
  Head
};
