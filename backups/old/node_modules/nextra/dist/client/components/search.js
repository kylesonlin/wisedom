"use client";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import { Combobox, ComboboxInput, ComboboxOption, ComboboxOptions } from "@headlessui/react";
import cn from "clsx";
import { addBasePath } from "next/dist/client/add-base-path";
import NextLink from "next/link";
import { useRouter } from "next/navigation";
import { useDeferredValue, useEffect, useRef, useState } from "react";
import { useMounted } from "../hooks/use-mounted.js";
import { InformationCircleIcon, SpinnerIcon } from "../icons/index.js";
async function importPagefind() {
  window.pagefind = await import(
    /* webpackIgnore: true */
    addBasePath("/_pagefind/pagefind.js")
  );
  await window.pagefind.options({
    baseUrl: "/"
    // ... more search options
  });
}
const INPUTS = /* @__PURE__ */ new Set(["INPUT", "SELECT", "BUTTON", "TEXTAREA"]);
const DEV_SEARCH_NOTICE = /* @__PURE__ */ jsxs(Fragment, { children: [
  /* @__PURE__ */ jsx("p", { children: "Search isn't available in development because Nextra\xA04 uses Pagefind package, which indexes built `.html` files instead of `.md`/`.mdx`." }),
  /* @__PURE__ */ jsx("p", { className: "x:mt-2", children: "To test search during development, run `next build` and then restart your app with `next dev`." })
] });
const Search = (t0) => {
  const $ = _c(44);
  const {
    className,
    emptyResult: t1,
    errorText: t2,
    loading: t3,
    placeholder: t4,
    searchOptions
  } = t0;
  const emptyResult = t1 === void 0 ? "No results found." : t1;
  const errorText = t2 === void 0 ? "Failed to load search index." : t2;
  const loading = t3 === void 0 ? "Loading\u2026" : t3;
  const placeholder = t4 === void 0 ? "Search documentation\u2026" : t4;
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");
  let t5;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = [];
    $[0] = t5;
  } else {
    t5 = $[0];
  }
  const [results, setResults] = useState(t5);
  const [search, setSearch] = useState("");
  const deferredSearch = useDeferredValue(search);
  let t6;
  if ($[1] !== deferredSearch || $[2] !== searchOptions) {
    t6 = () => {
      const handleSearch = async (value) => {
        if (!value) {
          setResults([]);
          setError("");
          return;
        }
        setIsLoading(true);
        if (!window.pagefind) {
          ;
          try {
            await importPagefind();
          } catch (t72) {
            const error_0 = t72;
            const message = error_0 instanceof Error ? process.env.NODE_ENV !== "production" && error_0.message.includes("Failed to fetch") ? DEV_SEARCH_NOTICE : `${error_0.constructor.name}: ${error_0.message}` : String(error_0);
            setError(message);
            setIsLoading(false);
            return;
          }
        }
        const response = await window.pagefind.debouncedSearch(value, searchOptions);
        if (!response) {
          return;
        }
        const data = await Promise.all(response.results.map(_temp));
        setIsLoading(false);
        setError("");
        setResults(data.map(_temp3));
      };
      handleSearch(deferredSearch);
    };
    $[1] = deferredSearch;
    $[2] = searchOptions;
    $[3] = t6;
  } else {
    t6 = $[3];
  }
  let t7;
  if ($[4] !== deferredSearch) {
    t7 = [deferredSearch];
    $[4] = deferredSearch;
    $[5] = t7;
  } else {
    t7 = $[5];
  }
  useEffect(t6, t7);
  const router = useRouter();
  const [focused, setFocused] = useState(false);
  const mounted = useMounted();
  const inputRef = useRef(null);
  let t8;
  let t9;
  if ($[6] === Symbol.for("react.memo_cache_sentinel")) {
    t8 = () => {
      const handleKeyDown = function handleKeyDown2(event) {
        const el = document.activeElement;
        if (!el || INPUTS.has(el.tagName) || el.isContentEditable) {
          return;
        }
        if (event.key === "/" || event.key === "k" && !event.shiftKey && (navigator.userAgent.includes("Mac") ? event.metaKey : event.ctrlKey)) {
          event.preventDefault();
          inputRef.current.focus({
            preventScroll: true
          });
        }
      };
      window.addEventListener("keydown", handleKeyDown);
      return () => {
        window.removeEventListener("keydown", handleKeyDown);
      };
    };
    t9 = [];
    $[6] = t8;
    $[7] = t9;
  } else {
    t8 = $[6];
    t9 = $[7];
  }
  useEffect(t8, t9);
  let t10;
  if ($[8] !== focused || $[9] !== mounted) {
    t10 = mounted && !focused && /* @__PURE__ */ jsx("kbd", { className: cn("x:absolute x:my-1.5 x:select-none x:end-1.5", "x:h-5 x:rounded x:bg-nextra-bg x:px-1.5 x:font-mono x:text-[11px] x:font-medium x:text-gray-500", "x:border nextra-border", "x:contrast-more:text-current", "x:items-center x:gap-1 x:flex", "x:max-sm:hidden not-prose"), children: navigator.userAgent.includes("Mac") ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("span", { className: "x:text-xs", children: "\u2318" }),
      "K"
    ] }) : "CTRL K" });
    $[8] = focused;
    $[9] = mounted;
    $[10] = t10;
  } else {
    t10 = $[10];
  }
  const icon = t10;
  let t11;
  if ($[11] === Symbol.for("react.memo_cache_sentinel")) {
    t11 = (event_0) => {
      const isFocus = event_0.type === "focus";
      setFocused(isFocus);
    };
    $[11] = t11;
  } else {
    t11 = $[11];
  }
  const handleFocus = t11;
  let t12;
  if ($[12] === Symbol.for("react.memo_cache_sentinel")) {
    t12 = (event_1) => {
      const {
        value: value_0
      } = event_1.currentTarget;
      setSearch(value_0);
    };
    $[12] = t12;
  } else {
    t12 = $[12];
  }
  const handleChange = t12;
  let t13;
  if ($[13] !== router) {
    t13 = (searchResult) => {
      if (!searchResult) {
        return;
      }
      inputRef.current.blur();
      const [url_0, hash] = searchResult.url.split("#");
      const isSamePathname = location.pathname === url_0;
      if (isSamePathname) {
        location.href = `#${hash}`;
      } else {
        router.push(searchResult.url);
      }
      setSearch("");
    };
    $[13] = router;
    $[14] = t13;
  } else {
    t13 = $[14];
  }
  const handleSelect = t13;
  let t14;
  if ($[15] !== className) {
    t14 = cn("nextra-search", "x:relative x:flex x:items-center", "x:text-gray-900 x:dark:text-gray-300", "x:contrast-more:text-gray-800 x:contrast-more:dark:text-gray-300", className);
    $[15] = className;
    $[16] = t14;
  } else {
    t14 = $[16];
  }
  let t15;
  if ($[17] !== placeholder || $[18] !== search) {
    t15 = /* @__PURE__ */ jsx(ComboboxInput, { ref: inputRef, spellCheck: false, className: _temp4, autoComplete: "off", type: "search", onChange: handleChange, onFocus: handleFocus, onBlur: handleFocus, value: search, placeholder });
    $[17] = placeholder;
    $[18] = search;
    $[19] = t15;
  } else {
    t15 = $[19];
  }
  let t16;
  if ($[20] !== icon || $[21] !== t14 || $[22] !== t15) {
    t16 = /* @__PURE__ */ jsxs("div", { className: t14, children: [
      t15,
      icon
    ] });
    $[20] = icon;
    $[21] = t14;
    $[22] = t15;
    $[23] = t16;
  } else {
    t16 = $[23];
  }
  let t17;
  if ($[24] === Symbol.for("react.memo_cache_sentinel")) {
    t17 = {
      to: "top end",
      gap: 10,
      padding: 16
    };
    $[24] = t17;
  } else {
    t17 = $[24];
  }
  let t18;
  if ($[25] !== error || $[26] !== isLoading || $[27] !== results) {
    t18 = (t192) => {
      const {
        open
      } = t192;
      return cn("nextra-search-results", "nextra-scrollbar x:max-md:h-full", "x:border x:border-gray-200 x:text-gray-100 x:dark:border-neutral-800", "x:z-30 x:rounded-xl x:py-2.5 x:shadow-xl", "x:contrast-more:border x:contrast-more:border-gray-900 x:contrast-more:dark:border-gray-50", "x:backdrop-blur-md x:bg-nextra-bg/70", "x:motion-reduce:transition-none x:transition-opacity", open ? "x:opacity-100" : "x:opacity-0", error || isLoading || !results.length ? ["x:md:min-h-28 x:grow x:flex x:justify-center x:text-sm x:gap-2 x:px-8", error ? "x:text-red-500 x:items-start" : "x:text-gray-400 x:items-center"] : "x:md:max-h-[min(calc(100vh-5rem),400px)]!", "x:w-full x:md:w-[576px]", "x:empty:invisible");
    };
    $[25] = error;
    $[26] = isLoading;
    $[27] = results;
    $[28] = t18;
  } else {
    t18 = $[28];
  }
  let t19;
  if ($[29] !== deferredSearch || $[30] !== emptyResult || $[31] !== error || $[32] !== errorText || $[33] !== isLoading || $[34] !== loading || $[35] !== results) {
    t19 = error ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(InformationCircleIcon, { height: "20", className: "x:shrink-0" }),
      /* @__PURE__ */ jsxs("div", { className: "x:grid", children: [
        /* @__PURE__ */ jsx("b", { className: "x:mb-2", children: errorText }),
        error
      ] })
    ] }) : isLoading ? /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(SpinnerIcon, { height: "20", className: "x:shrink-0 x:animate-spin" }),
      loading
    ] }) : results.length ? results.map(_temp5) : deferredSearch && emptyResult;
    $[29] = deferredSearch;
    $[30] = emptyResult;
    $[31] = error;
    $[32] = errorText;
    $[33] = isLoading;
    $[34] = loading;
    $[35] = results;
    $[36] = t19;
  } else {
    t19 = $[36];
  }
  let t20;
  if ($[37] !== t18 || $[38] !== t19) {
    t20 = /* @__PURE__ */ jsx(ComboboxOptions, { transition: true, anchor: t17, className: t18, children: t19 });
    $[37] = t18;
    $[38] = t19;
    $[39] = t20;
  } else {
    t20 = $[39];
  }
  let t21;
  if ($[40] !== handleSelect || $[41] !== t16 || $[42] !== t20) {
    t21 = /* @__PURE__ */ jsxs(Combobox, { onChange: handleSelect, children: [
      t16,
      t20
    ] });
    $[40] = handleSelect;
    $[41] = t16;
    $[42] = t20;
    $[43] = t21;
  } else {
    t21 = $[43];
  }
  return t21;
};
const Result = (t0) => {
  const $ = _c(8);
  const {
    data
  } = t0;
  let t1;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t1 = cn("x:mx-2.5 x:mb-2 x:not-first:mt-6 x:select-none x:border-b x:border-black/10 x:px-2.5 x:pb-1.5 x:text-xs x:font-semibold x:uppercase x:text-gray-500 x:dark:border-white/20 x:dark:text-gray-300", "x:contrast-more:border-gray-600 x:contrast-more:text-gray-900 x:contrast-more:dark:border-gray-50 x:contrast-more:dark:text-gray-50");
    $[0] = t1;
  } else {
    t1 = $[0];
  }
  let t2;
  if ($[1] !== data.meta.title) {
    t2 = /* @__PURE__ */ jsx("div", { className: t1, children: data.meta.title });
    $[1] = data.meta.title;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  let t3;
  if ($[3] !== data.sub_results) {
    t3 = data.sub_results.map(_temp7);
    $[3] = data.sub_results;
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  let t4;
  if ($[5] !== t2 || $[6] !== t3) {
    t4 = /* @__PURE__ */ jsxs(Fragment, { children: [
      t2,
      t3
    ] });
    $[5] = t2;
    $[6] = t3;
    $[7] = t4;
  } else {
    t4 = $[7];
  }
  return t4;
};
function _temp(o) {
  return o.data();
}
function _temp2(r) {
  const url = r.url.replace(/\.html$/, "").replace(/\.html#/, "#");
  return {
    ...r,
    url
  };
}
function _temp3(newData) {
  return {
    ...newData,
    sub_results: newData.sub_results.map(_temp2)
  };
}
function _temp4(t0) {
  const {
    focus
  } = t0;
  return cn("x:rounded-lg x:px-3 x:py-2 x:transition-colors", "x:w-full x:md:w-64", "x:text-base x:leading-tight x:md:text-sm", focus ? "x:bg-transparent x:nextra-focus" : "x:bg-black/[.05] x:dark:bg-gray-50/10", "x:placeholder:text-gray-500 x:dark:placeholder:text-gray-400", "x:contrast-more:border x:contrast-more:border-current", "x:[&::-webkit-search-cancel-button]:appearance-none");
}
function _temp5(searchResult_0) {
  return /* @__PURE__ */ jsx(Result, { data: searchResult_0 }, searchResult_0.url);
}
function _temp6(t0) {
  const {
    focus
  } = t0;
  return cn("x:mx-2.5 x:break-words x:rounded-md", "x:contrast-more:border", focus ? "x:text-primary-600 x:contrast-more:border-current x:bg-primary-500/10" : "x:text-gray-800 x:dark:text-gray-300 x:contrast-more:border-transparent", "x:block x:scroll-m-12 x:px-2.5 x:py-2");
}
function _temp7(subResult) {
  return /* @__PURE__ */ jsxs(ComboboxOption, { as: NextLink, value: subResult, href: subResult.url, className: _temp6, children: [
    /* @__PURE__ */ jsx("div", { className: "x:text-base x:font-semibold x:leading-5", children: subResult.title }),
    /* @__PURE__ */ jsx("div", { className: cn("x:mt-1 x:text-sm x:leading-[1.35rem] x:text-gray-600 x:dark:text-gray-400 x:contrast-more:dark:text-gray-50", "x:[&_mark]:bg-primary-600/80 x:[&_mark]:text-white"), dangerouslySetInnerHTML: {
      __html: subResult.excerpt
    } })
  ] }, subResult.url);
}
export {
  Search,
  importPagefind
};
