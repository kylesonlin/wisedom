"use client";
import { jsx } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import { useEffect, useState } from "react";
import { evaluate } from "../evaluate.js";
import { CrossCircledIcon } from "../icons/index.js";
import { Code } from "../mdx-components/code.js";
import { Pre } from "../mdx-components/pre/index.js";
const Playground = (t0) => {
  const $ = _c(12);
  const {
    source,
    fallback: t1,
    components,
    scope
  } = t0;
  const fallback = t1 === void 0 ? null : t1;
  const [compiledSource, setCompiledSource] = useState("");
  const [error, setError] = useState();
  let t2;
  let t3;
  if ($[0] !== source) {
    t2 = () => {
      const doCompile = async function doCompile2() {
        const {
          compileMdx
        } = await importCompile();
        ;
        try {
          const rawJs = await compileMdx(source);
          setCompiledSource(rawJs);
          setError(null);
        } catch (t4) {
          const error_0 = t4;
          setError(error_0);
        }
      };
      doCompile();
    };
    t3 = [source];
    $[0] = source;
    $[1] = t2;
    $[2] = t3;
  } else {
    t2 = $[1];
    t3 = $[2];
  }
  useEffect(t2, t3);
  if (error) {
    let t4;
    if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
      t4 = /* @__PURE__ */ jsx(CrossCircledIcon, { height: "16", className: "x:shrink-0" });
      $[3] = t4;
    } else {
      t4 = $[3];
    }
    const t5 = error instanceof Error ? `${error.name}: ${error.message}` : String(error);
    let t6;
    if ($[4] !== t5) {
      t6 = /* @__PURE__ */ jsx("div", { className: "x:[&_svg]:text-red-500", children: /* @__PURE__ */ jsx(Pre, { "data-filename": "Could not compile code", icon: t4, className: "x:whitespace-pre-wrap", children: /* @__PURE__ */ jsx(Code, { children: /* @__PURE__ */ jsx("span", { children: t5 }) }) }) });
      $[4] = t5;
      $[5] = t6;
    } else {
      t6 = $[5];
    }
    return t6;
  }
  if (compiledSource) {
    let t4;
    if ($[6] !== compiledSource || $[7] !== components || $[8] !== scope) {
      t4 = evaluate(compiledSource, components, scope);
      $[6] = compiledSource;
      $[7] = components;
      $[8] = scope;
      $[9] = t4;
    } else {
      t4 = $[9];
    }
    const MDXContent = t4.default;
    let t5;
    if ($[10] !== MDXContent) {
      t5 = /* @__PURE__ */ jsx(MDXContent, {});
      $[10] = MDXContent;
      $[11] = t5;
    } else {
      t5 = $[11];
    }
    return t5;
  }
  return fallback;
};
function importCompile() {
  return import("../../server/compile.js");
}
export {
  Playground
};
