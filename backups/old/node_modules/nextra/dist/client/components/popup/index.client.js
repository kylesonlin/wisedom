"use client";
import { jsx } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import { Popover, PopoverPanel } from "@headlessui/react";
import cn from "clsx";
import { createContext, useContext, useState } from "react";
const PopupContext = createContext(null);
function usePopup() {
  const ctx = useContext(PopupContext);
  if (typeof ctx !== "boolean") {
    throw new Error("`usePopup` must be used within a `<Popup>` component");
  }
  return ctx;
}
const Popup = (props) => {
  const $ = _c(6);
  const [isOpen, setIsOpen] = useState(false);
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = (event) => {
      setIsOpen(event.type === "mouseenter");
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  const handleMouse = t0;
  let t1;
  if ($[1] !== props) {
    t1 = /* @__PURE__ */ jsx(Popover, { as: "span", onMouseEnter: handleMouse, onMouseLeave: handleMouse, ...props });
    $[1] = props;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  let t2;
  if ($[3] !== isOpen || $[4] !== t1) {
    t2 = /* @__PURE__ */ jsx(PopupContext.Provider, { value: isOpen, children: t1 });
    $[3] = isOpen;
    $[4] = t1;
    $[5] = t2;
  } else {
    t2 = $[5];
  }
  return t2;
};
const PopupPanel = (props) => {
  const $ = _c(7);
  const isOpen = usePopup();
  let t0;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = {
      to: "bottom start",
      gap: -24
    };
    $[0] = t0;
  } else {
    t0 = $[0];
  }
  let t1;
  if ($[1] !== props.className) {
    t1 = cn("x:max-w-2xl!", props.className);
    $[1] = props.className;
    $[2] = t1;
  } else {
    t1 = $[2];
  }
  let t2;
  if ($[3] !== isOpen || $[4] !== props || $[5] !== t1) {
    t2 = /* @__PURE__ */ jsx(PopoverPanel, { static: isOpen, anchor: t0, ...props, className: t1 });
    $[3] = isOpen;
    $[4] = props;
    $[5] = t1;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  return t2;
};
export {
  Popup,
  PopupPanel
};
