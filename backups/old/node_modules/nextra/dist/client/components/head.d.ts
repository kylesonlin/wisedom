import { FC, ReactNode } from 'react';
import { z } from 'zod';

declare const headSchema: z.ZodObject<{
    color: z.ZodDefault<z.ZodObject<{
        hue: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            dark: z.ZodNumber;
            light: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            dark: number;
            light: number;
        }, {
            dark: number;
            light: number;
        }>]>, {
            dark: number;
            light: number;
        }, number | {
            dark: number;
            light: number;
        }>>;
        saturation: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            dark: z.ZodNumber;
            light: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            dark: number;
            light: number;
        }, {
            dark: number;
            light: number;
        }>]>, {
            dark: number;
            light: number;
        }, number | {
            dark: number;
            light: number;
        }>>;
        lightness: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            dark: z.ZodNumber;
            light: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            dark: number;
            light: number;
        }, {
            dark: number;
            light: number;
        }>]>, {
            dark: number;
            light: number;
        }, number | {
            dark: number;
            light: number;
        }>>;
    }, "strict", z.ZodTypeAny, {
        hue: {
            dark: number;
            light: number;
        };
        saturation: {
            dark: number;
            light: number;
        };
        lightness: {
            dark: number;
            light: number;
        };
    }, {
        hue?: number | {
            dark: number;
            light: number;
        } | undefined;
        saturation?: number | {
            dark: number;
            light: number;
        } | undefined;
        lightness?: number | {
            dark: number;
            light: number;
        } | undefined;
    }>>;
    faviconGlyph: z.ZodOptional<z.ZodString>;
    backgroundColor: z.ZodDefault<z.ZodObject<{
        dark: z.ZodDefault<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>;
        light: z.ZodDefault<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>;
    }, "strict", z.ZodTypeAny, {
        dark: string;
        light: string;
    }, {
        dark?: string | undefined;
        light?: string | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    color: {
        hue: {
            dark: number;
            light: number;
        };
        saturation: {
            dark: number;
            light: number;
        };
        lightness: {
            dark: number;
            light: number;
        };
    };
    backgroundColor: {
        dark: string;
        light: string;
    };
    faviconGlyph?: string | undefined;
}, {
    color?: {
        hue?: number | {
            dark: number;
            light: number;
        } | undefined;
        saturation?: number | {
            dark: number;
            light: number;
        } | undefined;
        lightness?: number | {
            dark: number;
            light: number;
        } | undefined;
    } | undefined;
    faviconGlyph?: string | undefined;
    backgroundColor?: {
        dark?: string | undefined;
        light?: string | undefined;
    } | undefined;
}>;
type HeadProps = Partial<z.input<typeof headSchema>> & {
    children?: ReactNode;
};
declare const Head: FC<HeadProps>;

export { Head };
