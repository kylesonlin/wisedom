"use client";
import { jsx } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import { useEffect, useRef, useState } from "react";
import Zoom from "react-medium-image-zoom";
import { Image } from "../mdx-components/image.js";
function getImageSrc(src) {
  if (typeof src === "string") {
    return src;
  }
  if ("default" in src) {
    return src.default.src;
  }
  return src.src;
}
const ImageZoom = (props) => {
  const $ = _c(12);
  const imgRef = useRef(null);
  const [isInsideAnchor, setIsInsideAnchor] = useState(false);
  let t0;
  let t1;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t0 = () => {
      setIsInsideAnchor(imgRef.current.closest("a") !== null);
    };
    t1 = [];
    $[0] = t0;
    $[1] = t1;
  } else {
    t0 = $[0];
    t1 = $[1];
  }
  useEffect(t0, t1);
  let t2;
  if ($[2] !== props) {
    t2 = /* @__PURE__ */ jsx(Image, { ...props, ref: imgRef });
    $[2] = props;
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  const img = t2;
  if (isInsideAnchor) {
    return img;
  }
  let t3;
  if ($[4] !== props.src) {
    t3 = getImageSrc(props.src);
    $[4] = props.src;
    $[5] = t3;
  } else {
    t3 = $[5];
  }
  let t4;
  if ($[6] !== props.alt || $[7] !== t3) {
    t4 = {
      src: t3,
      alt: props.alt
    };
    $[6] = props.alt;
    $[7] = t3;
    $[8] = t4;
  } else {
    t4 = $[8];
  }
  let t5;
  if ($[9] !== img || $[10] !== t4) {
    t5 = /* @__PURE__ */ jsx(Zoom, { zoomMargin: 40, zoomImg: t4, wrapElement: "span", children: img });
    $[9] = img;
    $[10] = t4;
    $[11] = t5;
  } else {
    t5 = $[11];
  }
  return t5;
};
export {
  ImageZoom
};
