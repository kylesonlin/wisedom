import { jsx, jsxs } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import cn from "clsx";
import NextLink from "next/link";
const Card = (t0) => {
  const $ = _c(29);
  let arrow;
  let children;
  let className;
  let href;
  let icon;
  let props;
  let title;
  if ($[0] !== t0) {
    ({
      children,
      title,
      icon,
      arrow,
      href,
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = arrow;
    $[2] = children;
    $[3] = className;
    $[4] = href;
    $[5] = icon;
    $[6] = props;
    $[7] = title;
  } else {
    arrow = $[1];
    children = $[2];
    className = $[3];
    href = $[4];
    icon = $[5];
    props = $[6];
    title = $[7];
  }
  const t1 = children ? "x:bg-gray-100 x:shadow x:dark:border-neutral-700 x:dark:bg-neutral-800 x:dark:text-gray-50 x:hover:shadow-lg x:dark:hover:border-neutral-500 x:dark:hover:bg-neutral-700" : "x:bg-transparent x:shadow-sm x:dark:border-neutral-800 x:hover:bg-slate-50 x:hover:shadow-md x:dark:hover:border-neutral-700 x:dark:hover:bg-neutral-900";
  let t2;
  if ($[8] !== className || $[9] !== t1) {
    t2 = cn("x:group", "x:focus-visible:nextra-focus nextra-card x:flex x:flex-col x:justify-start x:overflow-hidden x:rounded-lg x:border x:border-gray-200", "x:text-current x:no-underline x:dark:shadow-none", "x:hover:shadow-gray-100 x:dark:hover:shadow-none x:shadow-gray-100", "x:active:shadow-sm x:active:shadow-gray-200", "x:transition-all x:duration-200 x:hover:border-gray-300", t1, className);
    $[8] = className;
    $[9] = t1;
    $[10] = t2;
  } else {
    t2 = $[10];
  }
  let t3;
  if ($[11] !== arrow) {
    t3 = arrow && ['x:after:content-["\u2192"] x:after:transition-transform x:after:duration-75', "x:group-hover:after:translate-x-0.5", "x:group-focus:after:translate-x-0.5"];
    $[11] = arrow;
    $[12] = t3;
  } else {
    t3 = $[12];
  }
  const t4 = children ? "x:dark:text-gray-300 x:dark:hover:text-gray-100" : "x:dark:text-neutral-200 x:dark:hover:text-neutral-50";
  let t5;
  if ($[13] !== t3 || $[14] !== t4) {
    t5 = cn("x:flex x:font-semibold x:items-center x:gap-2 x:p-4 x:text-gray-700 x:hover:text-gray-900", t3, t4);
    $[13] = t3;
    $[14] = t4;
    $[15] = t5;
  } else {
    t5 = $[15];
  }
  let t6;
  if ($[16] !== title) {
    t6 = /* @__PURE__ */ jsx("span", { className: "_truncate", children: title });
    $[16] = title;
    $[17] = t6;
  } else {
    t6 = $[17];
  }
  let t7;
  if ($[18] !== icon || $[19] !== t5 || $[20] !== t6 || $[21] !== title) {
    t7 = /* @__PURE__ */ jsxs("span", { className: t5, title, children: [
      icon,
      t6
    ] });
    $[18] = icon;
    $[19] = t5;
    $[20] = t6;
    $[21] = title;
    $[22] = t7;
  } else {
    t7 = $[22];
  }
  let t8;
  if ($[23] !== children || $[24] !== href || $[25] !== props || $[26] !== t2 || $[27] !== t7) {
    t8 = /* @__PURE__ */ jsxs(NextLink, { href, className: t2, ...props, children: [
      children,
      t7
    ] });
    $[23] = children;
    $[24] = href;
    $[25] = props;
    $[26] = t2;
    $[27] = t7;
    $[28] = t8;
  } else {
    t8 = $[28];
  }
  return t8;
};
const _Cards = ({
  children,
  num = 3,
  className,
  style,
  ...props
}) => {
  return /* @__PURE__ */ jsx("div", { className: cn(
    "nextra-cards x:mt-4 x:gap-4 x:grid",
    "not-prose",
    // for nextra-theme-blog
    className
  ), ...props, style: {
    ...style,
    ["--rows"]: num
  }, children });
};
const Cards = Object.assign(_Cards, {
  displayName: "Cards",
  Card
});
export {
  Cards
};
