"use no memo";
import { notFound } from "next/navigation";
import { getRouteToFilepath } from "../server/page-map/get.js";
import { logger } from "../server/utils.js";
async function importPage(pathSegments = [], lang = "") {
  const RouteToFilepath = await getRouteToFilepath(lang);
  const pathname = pathSegments.join("/");
  const decodedPath = decodeURIComponent(pathname);
  const pagePath = RouteToFilepath[decodedPath];
  try {
    return require(`private-next-content-dir/${lang && `${lang}/`}${pagePath}`);
  } catch (error) {
    logger.error("Error while loading", {
      pathSegments
    }, error);
    notFound();
  }
}
const generateStaticParamsFor = (segmentKey, localeSegmentKey = "lang") => async () => {
  const locales = JSON.parse(process.env.NEXTRA_LOCALES);
  const result = [];
  for (const locale of locales) {
    const RouteToFilepath = await getRouteToFilepath(locale);
    const routes = Object.keys(RouteToFilepath);
    result.push(...routes.map((route) => ({
      ...locale && {
        [localeSegmentKey]: locale
      },
      [segmentKey]: route.split("/")
    })));
  }
  return result;
};
export {
  generateStaticParamsFor,
  importPage
};
