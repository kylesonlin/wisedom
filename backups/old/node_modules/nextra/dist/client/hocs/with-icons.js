"use no memo";
import { jsx } from "react/jsx-runtime";
import path from "path";
import { CPPIcon, CsharpIcon, CssIcon, GoIcon, GraphQLIcon, JavaScriptIcon, JSONIcon, MarkdownIcon, MdxIcon, MoveIcon, PythonIcon, ReactIcon, RustIcon, SvelteIcon, TerminalIcon, TerraformIcon, TypeScriptIcon } from "../icons/index.js";
function getIcon(language) {
  switch (language) {
    case "javascript":
    case "js":
    case "mjs":
    case "cjs":
      return JavaScriptIcon;
    case "typescript":
    case "ts":
    case "mts":
    case "cts":
      return TypeScriptIcon;
    case "jsx":
    case "tsx":
      return ReactIcon;
    case "md":
      return MarkdownIcon;
    case "mdx":
      return MdxIcon;
    case "sh":
    case "bash":
      return TerminalIcon;
    case "css":
      return CssIcon;
    case "c++":
    case "cpp":
      return CPPIcon;
    case "csharp":
    case "cs":
    case "c#":
      return CsharpIcon;
    case "graphql":
    case "gql":
      return GraphQLIcon;
    case "python":
    case "py":
      return PythonIcon;
    case "rust":
    case "rs":
      return RustIcon;
    case "terraform":
    case "tf":
      return TerraformIcon;
    case "move":
      return MoveIcon;
    case "go":
    case "golang":
      return GoIcon;
    case "json":
    case "jsonc":
      return JSONIcon;
    case "svelte":
      return SvelteIcon;
  }
}
function withIcons(Component, obj) {
  return function Pre(props) {
    let language = props["data-language"];
    const filename = props["data-filename"];
    if (language === "diff" && filename) {
      const ext = path.parse(filename).ext.slice(1);
      if (ext) {
        language = ext;
      }
    }
    const Icon = language && (obj?.[language] || getIcon(language));
    return /* @__PURE__ */ jsx(Component, { icon: Icon && /* @__PURE__ */ jsx(Icon, { height: "16", className: "x:max-w-6 x:shrink-0" }), ...props });
  };
}
export {
  withIcons
};
