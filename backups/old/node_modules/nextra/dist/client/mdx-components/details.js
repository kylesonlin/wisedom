"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import cn from "clsx";
import { Children, cloneElement, useEffect, useRef, useState } from "react";
import { Collapse } from "../components/collapse.js";
import { useHash } from "../hooks/index.js";
const Details = (t0) => {
  const $ = _c(26);
  let children;
  let className;
  let open;
  let props;
  if ($[0] !== t0) {
    ({
      children,
      open,
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = open;
    $[4] = props;
  } else {
    children = $[1];
    className = $[2];
    open = $[3];
    props = $[4];
  }
  const [isOpen, setIsOpen] = useState(!!open);
  const [delayedOpenState, setDelayedOpenState] = useState(isOpen);
  const animationRef = useRef(0);
  let t1;
  let t2;
  if ($[5] !== isOpen) {
    t1 = () => {
      const animation = animationRef.current;
      if (animation) {
        clearTimeout(animation);
        animationRef.current = 0;
      }
      if (!isOpen) {
        animationRef.current = window.setTimeout(() => setDelayedOpenState(isOpen), 300);
        return () => {
          clearTimeout(animationRef.current);
        };
      }
      setDelayedOpenState(true);
    };
    t2 = [isOpen];
    $[5] = isOpen;
    $[6] = t1;
    $[7] = t2;
  } else {
    t1 = $[6];
    t2 = $[7];
  }
  useEffect(t1, t2);
  let t3;
  if ($[8] !== children) {
    t3 = findSummary(children, setIsOpen);
    $[8] = children;
    $[9] = t3;
  } else {
    t3 = $[9];
  }
  const [summaryElement, restChildren] = t3;
  const hash = useHash();
  const detailsRef = useRef(null);
  let t4;
  let t5;
  if ($[10] !== hash) {
    t4 = () => {
      if (!hash) {
        return;
      }
      const elementWithHashId = detailsRef.current.querySelector(`[id="${hash}"]`);
      if (!elementWithHashId) {
        return;
      }
      setIsOpen(true);
    };
    t5 = [hash];
    $[10] = hash;
    $[11] = t4;
    $[12] = t5;
  } else {
    t4 = $[11];
    t5 = $[12];
  }
  useEffect(t4, t5);
  let t6;
  if ($[13] !== className) {
    t6 = cn("x:not-first:mt-4 x:rounded x:border x:border-gray-200 x:bg-white x:p-2 x:shadow-sm x:dark:border-neutral-800 x:dark:bg-neutral-900", "x:overflow-hidden", className);
    $[13] = className;
    $[14] = t6;
  } else {
    t6 = $[14];
  }
  const t7 = isOpen || delayedOpenState;
  const t8 = isOpen ? "" : void 0;
  let t9;
  if ($[15] === Symbol.for("react.memo_cache_sentinel")) {
    t9 = cn("x:*:pt-2", "x:grid");
    $[15] = t9;
  } else {
    t9 = $[15];
  }
  let t10;
  if ($[16] !== isOpen || $[17] !== restChildren) {
    t10 = /* @__PURE__ */ jsx(Collapse, { isOpen, className: t9, children: restChildren });
    $[16] = isOpen;
    $[17] = restChildren;
    $[18] = t10;
  } else {
    t10 = $[18];
  }
  let t11;
  if ($[19] !== props || $[20] !== summaryElement || $[21] !== t10 || $[22] !== t6 || $[23] !== t7 || $[24] !== t8) {
    t11 = /* @__PURE__ */ jsxs("details", { className: t6, ref: detailsRef, ...props, open: t7, "data-expanded": t8, children: [
      summaryElement,
      t10
    ] });
    $[19] = props;
    $[20] = summaryElement;
    $[21] = t10;
    $[22] = t6;
    $[23] = t7;
    $[24] = t8;
    $[25] = t11;
  } else {
    t11 = $[25];
  }
  return t11;
};
function findSummary(list, setIsOpen) {
  let summary;
  const rest = Children.map(list, (child) => {
    if (!summary && // Add onClick only for first summary
    child && typeof child === "object" && "type" in child) {
      if (child.type === "summary") {
        summary = cloneElement(child, {
          // @ts-expect-error -- fixme
          onClick(event) {
            if (event.target.tagName !== "A") {
              event.preventDefault();
              setIsOpen((v) => !v);
            }
          }
        });
        return;
      }
      if (child.type !== Details && child.props.children) {
        ;
        [summary, child] = findSummary(child.props.children, setIsOpen);
      }
    }
    return child;
  });
  return [summary, rest];
}
export {
  Details
};
