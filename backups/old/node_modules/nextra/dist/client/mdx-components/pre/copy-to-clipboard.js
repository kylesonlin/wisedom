"use client";
import { jsx } from "react/jsx-runtime";
import { c as _c } from "react-compiler-runtime";
import { useEffect, useState } from "react";
import { Button } from "../../components/button.js";
import { CheckIcon, CopyIcon } from "../../icons/index.js";
const CopyToClipboard = (props) => {
  const $ = _c(9);
  const [isCopied, setCopied] = useState(false);
  let t0;
  let t1;
  if ($[0] !== isCopied) {
    t0 = () => {
      if (!isCopied) {
        return;
      }
      const timerId = setTimeout(() => {
        setCopied(false);
      }, 2e3);
      return () => {
        clearTimeout(timerId);
      };
    };
    t1 = [isCopied];
    $[0] = isCopied;
    $[1] = t0;
    $[2] = t1;
  } else {
    t0 = $[1];
    t1 = $[2];
  }
  useEffect(t0, t1);
  let t2;
  if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = async (event) => {
      setCopied(true);
      const container = event.currentTarget.parentNode.parentNode;
      const content = container.querySelector("pre code")?.textContent || "";
      try {
        await navigator.clipboard.writeText(content);
      } catch {
        console.error("Failed to copy!");
      }
    };
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  const handleClick = t2;
  const IconToUse = isCopied ? CheckIcon : CopyIcon;
  let t3;
  if ($[4] !== IconToUse) {
    t3 = /* @__PURE__ */ jsx(IconToUse, { height: "1em", className: "nextra-copy-icon" });
    $[4] = IconToUse;
    $[5] = t3;
  } else {
    t3 = $[5];
  }
  let t4;
  if ($[6] !== props || $[7] !== t3) {
    t4 = /* @__PURE__ */ jsx(Button, { onClick: handleClick, title: "Copy code", variant: "outline", ...props, children: t3 });
    $[6] = props;
    $[7] = t3;
    $[8] = t4;
  } else {
    t4 = $[8];
  }
  return t4;
};
export {
  CopyToClipboard
};
