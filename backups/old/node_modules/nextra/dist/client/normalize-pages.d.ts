import { z } from 'zod';
import { itemSchema, menuSchema } from '../server/schemas.js';
import { MdxFile, Folder, FrontMatter, PageMapItem } from '../types.js';
import 'react';
import './lib/index.js';
import 'rehype-katex/lib/index.js';
import 'better-react-mathjax';
import 'rehype-pretty-code';
import 'mdast';
import 'next';

type PageTheme = NonNullable<z.infer<typeof itemSchema>['theme']>;
type Display = z.infer<typeof itemSchema>['display'];
type IMenuItem = z.infer<typeof menuSchema>;
type FolderWithoutChildren = Omit<Folder, 'children'>;
type Item = (MdxFile | FolderWithoutChildren) & {
    title: string;
    type: string;
    children: Item[];
    display?: Display;
    theme?: PageTheme;
    frontMatter: FrontMatter;
    isUnderCurrentDocsTree?: boolean;
};
type PageItem = (MdxFile | FolderWithoutChildren) & {
    title: string;
    type: string;
    href?: string;
    children?: PageItem[];
    firstChildRoute?: string;
    display?: Display;
    isUnderCurrentDocsTree?: boolean;
};
type MenuItem = (MdxFile | FolderWithoutChildren) & IMenuItem & {
    children?: PageItem[];
};
type DocsItem = (MdxFile | FolderWithoutChildren) & {
    title: string;
    type: string;
    children: DocsItem[];
    firstChildRoute?: string;
    isUnderCurrentDocsTree?: boolean;
};
type NormalizedResult = {
    activeType?: string;
    activeIndex: number;
    activeThemeContext: PageTheme;
    activeMetadata?: FrontMatter;
    activePath: Item[];
    directories: Item[];
    docsDirectories: DocsItem[];
    flatDocsDirectories: DocsItem[];
    topLevelNavbarItems: (PageItem | MenuItem)[];
};
declare function normalizePages({ list, route, docsRoot, pageThemeContext }: {
    list: PageMapItem[];
    route: string;
    docsRoot?: string;
    underCurrentDocsRoot?: boolean;
    pageThemeContext?: PageTheme;
}): NormalizedResult;

export { type Item, type MenuItem, type PageItem, normalizePages };
