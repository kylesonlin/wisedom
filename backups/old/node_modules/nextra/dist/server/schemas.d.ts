import * as react from 'react';
import { ReactElement, ReactNode } from 'react';
import { PluggableList } from './lib/index.js';
import * as rehype_katex_lib_index_js from 'rehype-katex/lib/index.js';
import { MathJax3Config } from 'better-react-mathjax';
import { Options } from 'rehype-pretty-code';
import { z } from 'zod';

declare const mathJaxOptionsSchema: z.ZodObject<{
    /**
     * URL for MathJax. Defaults to `https://cdnjs.cloudflare.com`
     */
    src: z.ZodOptional<z.ZodString>;
    /**
     * MathJax config. See https://docs.mathjax.org/en/latest/options/index.html
     */
    config: z.ZodOptional<z.ZodType<MathJax3Config, z.ZodTypeDef, MathJax3Config>>;
}, "strict", z.ZodTypeAny, {
    src?: string | undefined;
    config?: MathJax3Config | undefined;
}, {
    src?: string | undefined;
    config?: MathJax3Config | undefined;
}>;
declare const nextraConfigSchema: z.ZodObject<{
    defaultShowCopyCode: z.ZodOptional<z.ZodBoolean>;
    search: z.ZodDefault<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        /**
         * Whether to index code blocks
         */
        codeblocks: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        codeblocks: boolean;
    }, {
        codeblocks: boolean;
    }>]>>;
    staticImage: z.ZodDefault<z.ZodBoolean>;
    readingTime: z.ZodOptional<z.ZodBoolean>;
    latex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        renderer: z.ZodLiteral<"mathjax">;
        options: z.ZodOptional<z.ZodObject<{
            /**
             * URL for MathJax. Defaults to `https://cdnjs.cloudflare.com`
             */
            src: z.ZodOptional<z.ZodString>;
            /**
             * MathJax config. See https://docs.mathjax.org/en/latest/options/index.html
             */
            config: z.ZodOptional<z.ZodType<MathJax3Config, z.ZodTypeDef, MathJax3Config>>;
        }, "strict", z.ZodTypeAny, {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        }, {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    }, {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    }>, z.ZodObject<{
        renderer: z.ZodLiteral<"katex">;
        options: z.ZodType<rehype_katex_lib_index_js.Options, z.ZodTypeDef, rehype_katex_lib_index_js.Options>;
    }, "strict", z.ZodTypeAny, {
        options: rehype_katex_lib_index_js.Options;
        renderer: "katex";
    }, {
        options: rehype_katex_lib_index_js.Options;
        renderer: "katex";
    }>]>>;
    codeHighlight: z.ZodDefault<z.ZodBoolean>;
    mdxOptions: z.ZodDefault<z.ZodObject<{
        rehypePlugins: z.ZodType<PluggableList | null | undefined, z.ZodTypeDef, PluggableList | null | undefined>;
        remarkPlugins: z.ZodType<PluggableList | null | undefined, z.ZodTypeDef, PluggableList | null | undefined>;
        recmaPlugins: z.ZodType<PluggableList | null | undefined, z.ZodTypeDef, PluggableList | null | undefined>;
        format: z.ZodDefault<z.ZodEnum<["detect", "mdx", "md"]>>;
        rehypePrettyCodeOptions: z.ZodDefault<z.ZodType<Options, z.ZodTypeDef, Options>>;
    }, "strict", z.ZodTypeAny, {
        format: "detect" | "mdx" | "md";
        rehypePrettyCodeOptions: Options;
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
    }, {
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
        format?: "detect" | "mdx" | "md" | undefined;
        rehypePrettyCodeOptions?: Options | undefined;
    }>>;
    whiteListTagsStyling: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    contentDirBasePath: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
    unstable_shouldAddLocaleToLinks: z.ZodDefault<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    search: boolean | {
        codeblocks: boolean;
    };
    staticImage: boolean;
    codeHighlight: boolean;
    mdxOptions: {
        format: "detect" | "mdx" | "md";
        rehypePrettyCodeOptions: Options;
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
    };
    contentDirBasePath: string;
    unstable_shouldAddLocaleToLinks: boolean;
    defaultShowCopyCode?: boolean | undefined;
    readingTime?: boolean | undefined;
    latex?: boolean | {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    } | {
        options: rehype_katex_lib_index_js.Options;
        renderer: "katex";
    } | undefined;
    whiteListTagsStyling?: string[] | undefined;
}, {
    defaultShowCopyCode?: boolean | undefined;
    search?: boolean | {
        codeblocks: boolean;
    } | undefined;
    staticImage?: boolean | undefined;
    readingTime?: boolean | undefined;
    latex?: boolean | {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    } | {
        options: rehype_katex_lib_index_js.Options;
        renderer: "katex";
    } | undefined;
    codeHighlight?: boolean | undefined;
    mdxOptions?: {
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
        format?: "detect" | "mdx" | "md" | undefined;
        rehypePrettyCodeOptions?: Options | undefined;
    } | undefined;
    whiteListTagsStyling?: string[] | undefined;
    contentDirBasePath?: string | undefined;
    unstable_shouldAddLocaleToLinks?: boolean | undefined;
}>;
declare const element: z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>;
/**
 * https://react.dev/reference/react/isValidElement#react-elements-vs-react-nodes
 */
declare const reactNode: z.ZodType<ReactNode, z.ZodTypeDef, ReactNode>;
declare const separatorItemSchema: z.ZodObject<{
    type: z.ZodLiteral<"separator">;
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
}, "strict", z.ZodTypeAny, {
    type: "separator";
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
}, {
    type: "separator";
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
}>;
declare const menuSchema: z.ZodObject<{
    type: z.ZodLiteral<"menu">;
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
    items: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodEffects<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>, z.ZodObject<{
        title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
        href: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }, {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }>, z.ZodObject<{
        title: z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>;
    }, "strict", z.ZodTypeAny, {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }, {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"separator">;
        title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
    }, "strict", z.ZodTypeAny, {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }, {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }>]>, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    } | {
        title: ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & string) | ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & ReactElement<unknown, string | react.JSXElementConstructor<any>>);
    }, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>>, Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    } | {
        title: ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & string) | ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & ReactElement<unknown, string | react.JSXElementConstructor<any>>);
    }>, Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>>;
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden"]>>;
}, "strict", z.ZodTypeAny, {
    type: "menu";
    items: Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    } | {
        title: ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & string) | ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & ReactElement<unknown, string | react.JSXElementConstructor<any>>);
    }>;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | undefined;
}, {
    type: "menu";
    items: Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | undefined;
}>;
declare const itemSchema: z.ZodObject<{
    type: z.ZodOptional<z.ZodEnum<["page", "doc"]>>;
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
    /**
     * An option to control how an item should be displayed in the sidebar:
     * - `normal`: the default behavior, item will be displayed
     * - `hidden`: the item will not be displayed in the sidebar entirely
     * - `children`: if the item is a folder, itself will be hidden but all its children will still be processed
     */
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden", "children"]>>;
    theme: z.ZodOptional<z.ZodObject<{
        breadcrumb: z.ZodOptional<z.ZodBoolean>;
        collapsed: z.ZodOptional<z.ZodBoolean>;
        footer: z.ZodOptional<z.ZodBoolean>;
        layout: z.ZodOptional<z.ZodEnum<["default", "full"]>>;
        navbar: z.ZodOptional<z.ZodBoolean>;
        pagination: z.ZodOptional<z.ZodBoolean>;
        sidebar: z.ZodOptional<z.ZodBoolean>;
        timestamp: z.ZodOptional<z.ZodBoolean>;
        toc: z.ZodOptional<z.ZodBoolean>;
        typesetting: z.ZodOptional<z.ZodEnum<["default", "article"]>>;
    }, "strict", z.ZodTypeAny, {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    }, {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    type?: "page" | "doc" | undefined;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | "children" | undefined;
    theme?: {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    } | undefined;
}, {
    type?: "page" | "doc" | undefined;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | "children" | undefined;
    theme?: {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    } | undefined;
}>;
declare const metaSchema: z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
    title: string | (ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> & string) | ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>) & ReactElement<unknown, string | react.JSXElementConstructor<any>>);
}, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>, z.ZodObject<{
    type: z.ZodOptional<z.ZodEnum<["page", "doc"]>>;
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
    /**
     * An option to control how an item should be displayed in the sidebar:
     * - `normal`: the default behavior, item will be displayed
     * - `hidden`: the item will not be displayed in the sidebar entirely
     * - `children`: if the item is a folder, itself will be hidden but all its children will still be processed
     */
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden", "children"]>>;
    theme: z.ZodOptional<z.ZodObject<{
        breadcrumb: z.ZodOptional<z.ZodBoolean>;
        collapsed: z.ZodOptional<z.ZodBoolean>;
        footer: z.ZodOptional<z.ZodBoolean>;
        layout: z.ZodOptional<z.ZodEnum<["default", "full"]>>;
        navbar: z.ZodOptional<z.ZodBoolean>;
        pagination: z.ZodOptional<z.ZodBoolean>;
        sidebar: z.ZodOptional<z.ZodBoolean>;
        timestamp: z.ZodOptional<z.ZodBoolean>;
        toc: z.ZodOptional<z.ZodBoolean>;
        typesetting: z.ZodOptional<z.ZodEnum<["default", "article"]>>;
    }, "strict", z.ZodTypeAny, {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    }, {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    }>>;
}, "strict", z.ZodTypeAny, {
    type?: "page" | "doc" | undefined;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | "children" | undefined;
    theme?: {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    } | undefined;
}, {
    type?: "page" | "doc" | undefined;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | "children" | undefined;
    theme?: {
        pagination?: boolean | undefined;
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | undefined;
        navbar?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
    } | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
    href: z.ZodString;
}, {
    type: z.ZodOptional<z.ZodEnum<["page", "doc"]>>;
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden"]>>;
}>, "strict", z.ZodTypeAny, {
    href: string;
    type?: "page" | "doc" | undefined;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | undefined;
}, {
    href: string;
    type?: "page" | "doc" | undefined;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"separator">;
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
}, "strict", z.ZodTypeAny, {
    type: "separator";
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
}, {
    type: "separator";
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"menu">;
    title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
    items: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodEffects<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>, z.ZodObject<{
        title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
        href: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }, {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }>, z.ZodObject<{
        title: z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>;
    }, "strict", z.ZodTypeAny, {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }, {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"separator">;
        title: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>, z.ZodTypeDef, ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>>]>>;
    }, "strict", z.ZodTypeAny, {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }, {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    }>]>, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    } | {
        title: ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & string) | ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & ReactElement<unknown, string | react.JSXElementConstructor<any>>);
    }, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>>, Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    } | {
        title: ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & string) | ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & ReactElement<unknown, string | react.JSXElementConstructor<any>>);
    }>, Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>>;
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden"]>>;
}, "strict", z.ZodTypeAny, {
    type: "menu";
    items: Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    } | {
        title: ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & string) | ((string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
            href: string;
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            type: "separator";
            title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
        } | {
            title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
        }) & ReactElement<unknown, string | react.JSXElementConstructor<any>>);
    }>;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | undefined;
}, {
    type: "menu";
    items: Record<string, string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | {
        href: string;
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        type: "separator";
        title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    } | {
        title: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>>;
    }>;
    title?: string | ReactElement<Record<string, unknown>, string | react.JSXElementConstructor<any>> | undefined;
    display?: "normal" | "hidden" | undefined;
}>]>;

export { element, itemSchema, mathJaxOptionsSchema, menuSchema, metaSchema, nextraConfigSchema, reactNode, separatorItemSchema };
