import { valueToEstree } from "estree-util-value-to-estree";
import { parse as parseYaml } from "yaml";
import { createAstExportConst } from "../utils.js";
import { isExportNode } from "./remark-mdx-title.js";
function createNode(data) {
  return {
    type: "mdxjsEsm",
    data: {
      estree: {
        body: [createAstExportConst("metadata", valueToEstree(data))]
      }
    }
  };
}
const transformer = (ast) => {
  const yamlNodeIndex = ast.children.findIndex((node) => node.type === "yaml");
  const esmNodeIndex = ast.children.findIndex(
    (node) => isExportNode(node, "metadata")
  );
  const hasYaml = yamlNodeIndex !== -1;
  const hasEsm = esmNodeIndex !== -1;
  if (hasYaml) {
    if (hasEsm) {
      throw new Error(
        "Both YAML front matter and `metadata` aren't supported. Keep only 1."
      );
    }
    const node = ast.children[yamlNodeIndex];
    ast.children[yamlNodeIndex] = createNode(parseYaml(node.value) ?? {});
  } else if (!hasEsm) {
    ast.children.unshift(createNode({}));
  }
};
const remarkMdxFrontMatter = () => transformer;
export {
  remarkMdxFrontMatter
};
