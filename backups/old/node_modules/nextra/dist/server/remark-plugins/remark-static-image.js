import path from "path";
import { visit } from "unist-util-visit";
import { EXTERNAL_URL_RE } from "../constants.js";
const VALID_BLUR_EXT = [".jpeg", ".png", ".webp", ".avif", ".jpg"];
const VARIABLE_PREFIX = "__img";
const transformer = (ast) => {
  const definitionNodes = [];
  const imageImports = /* @__PURE__ */ new Set();
  const imageNodes = [];
  visit(ast, "definition", (node) => {
    definitionNodes.push(node);
  });
  visit(ast, ["image", "imageReference"], (_node) => {
    const node = _node;
    let url = decodeURI(
      node.type === "image" ? node.url : definitionNodes.find(
        (definition) => definition.identifier === node.identifier
      )?.url ?? ""
    );
    if (!url) {
      return;
    }
    if (EXTERNAL_URL_RE.test(url)) {
      return;
    }
    if (url.startsWith("/")) {
      url = path.posix.join("private-next-root-dir", "public", url);
    }
    imageImports.add(url);
    node.url = url;
    imageNodes.push(node);
  });
  const imageUrls = [...imageImports];
  for (const node of imageNodes) {
    const { url } = node;
    const imageIndex = imageUrls.indexOf(url);
    const variableName = `${VARIABLE_PREFIX}${imageIndex}`;
    const hasBlur = VALID_BLUR_EXT.some((ext) => url.endsWith(ext));
    Object.assign(node, {
      type: "mdxJsxFlowElement",
      name: "img",
      attributes: [
        // do not render empty alt in html markup
        node.alt && {
          type: "mdxJsxAttribute",
          name: "alt",
          value: node.alt
        },
        hasBlur && {
          type: "mdxJsxAttribute",
          name: "placeholder",
          value: "blur"
        },
        {
          type: "mdxJsxAttribute",
          name: "src",
          value: {
            type: "mdxJsxAttributeValueExpression",
            value: variableName,
            data: {
              estree: {
                body: [
                  {
                    type: "ExpressionStatement",
                    expression: { type: "Identifier", name: variableName }
                  }
                ]
              }
            }
          }
        }
      ].filter((v) => !!v)
    });
  }
  if (imageUrls.length) {
    ast.children.unshift(
      ...imageUrls.map(
        (imageUrl, index) => ({
          type: "mdxjsEsm",
          data: {
            estree: {
              body: [
                {
                  type: "ImportDeclaration",
                  source: { type: "Literal", value: imageUrl },
                  specifiers: [
                    {
                      type: "ImportDefaultSpecifier",
                      local: {
                        type: "Identifier",
                        name: `${VARIABLE_PREFIX}${index}`
                      }
                    }
                  ]
                }
              ]
            }
          }
        })
      )
    );
  }
};
const remarkStaticImage = () => transformer;
export {
  remarkStaticImage
};
