import { match as matchLocale } from "@formatjs/intl-localematcher";
import Negotiator from "negotiator";
import { addBasePath } from "next/dist/client/add-base-path";
import { NextResponse } from "next/server";
const locales = JSON.parse(process.env.NEXTRA_LOCALES);
const defaultLocale = process.env.NEXTRA_DEFAULT_LOCALE;
const HAS_LOCALE_RE = new RegExp(`^\\/(${locales.join("|")})(\\/|$)`);
const COOKIE_NAME = "NEXT_LOCALE";
function getHeadersLocale(request) {
  const headers = Object.fromEntries(
    // @ts-expect-error -- this works
    request.headers.entries()
  );
  const languages = new Negotiator({ headers }).languages(locales);
  const locale = matchLocale(languages, locales, defaultLocale);
  return locale;
}
function middleware(request) {
  const { pathname } = request.nextUrl;
  const pathnameHasLocale = HAS_LOCALE_RE.test(pathname);
  const cookieLocale = request.cookies.get(COOKIE_NAME)?.value;
  if (!pathnameHasLocale) {
    const locale = cookieLocale || getHeadersLocale(request);
    const url = addBasePath(`/${locale}${pathname}`);
    return NextResponse.redirect(new URL(url, request.url));
  }
  const [, requestLocale] = pathname.split("/", 2);
  if (requestLocale !== cookieLocale) {
    const response = NextResponse.next();
    response.cookies.set(COOKIE_NAME, requestLocale);
    return response;
  }
}
export {
  middleware
};
