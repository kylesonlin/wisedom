import { isValidElement } from "react";
import { z } from "zod";
import { pageTitleFromFilename } from "./utils.js";
const mathJaxOptionsSchema = z.strictObject({
  /**
   * URL for MathJax. Defaults to `https://cdnjs.cloudflare.com`
   */
  src: z.string().optional(),
  /**
   * MathJax config. See https://docs.mathjax.org/en/latest/options/index.html
   */
  config: z.custom().optional()
});
const nextraConfigSchema = z.strictObject({
  defaultShowCopyCode: z.boolean().optional(),
  search: z.union([
    z.boolean(),
    z.strictObject({
      /**
       * Whether to index code blocks
       */
      codeblocks: z.boolean()
    })
  ]).default({ codeblocks: false }),
  staticImage: z.boolean().default(true),
  readingTime: z.boolean().optional(),
  latex: z.union([
    z.boolean(),
    z.strictObject({
      renderer: z.literal("mathjax"),
      options: mathJaxOptionsSchema.optional()
    }),
    z.strictObject({
      renderer: z.literal("katex"),
      options: z.custom()
    })
  ]).optional(),
  codeHighlight: z.boolean().default(true),
  mdxOptions: z.strictObject({
    rehypePlugins: z.custom(),
    remarkPlugins: z.custom(),
    recmaPlugins: z.custom(),
    format: z.enum(["detect", "mdx", "md"]).default("detect"),
    rehypePrettyCodeOptions: z.custom().default({})
  }).default({}),
  whiteListTagsStyling: z.array(z.string()).optional(),
  contentDirBasePath: z.string().startsWith("/").refine(
    (value) => value.length === 1 || !value.endsWith("/"),
    (value) => ({ message: `"${value}" must not end with "/"` })
  ).default("/"),
  unstable_shouldAddLocaleToLinks: z.boolean().default(false)
});
const element = z.custom(
  isValidElement,
  { message: "Must be a valid React element" }
);
const reactNode = z.custom(
  function checkReactNode(data) {
    if (
      // Check if it's a valid React element
      isValidElement(data) || // Check if it's null or undefined
      data == null || typeof data === "string" || typeof data === "number" || typeof data === "boolean"
    ) {
      return true;
    }
    if (Array.isArray(data)) {
      return data.every((item) => checkReactNode(item));
    }
    return false;
  },
  { message: "Must be a valid React node" }
);
const stringOrElement = z.union([z.string(), element]);
const pageThemeSchema = z.strictObject({
  breadcrumb: z.boolean().optional(),
  collapsed: z.boolean().optional(),
  footer: z.boolean().optional(),
  layout: z.enum(["default", "full"]).optional(),
  navbar: z.boolean().optional(),
  pagination: z.boolean().optional(),
  sidebar: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  toc: z.boolean().optional(),
  typesetting: z.enum(["default", "article"]).optional()
});
const title = stringOrElement.optional();
const linkSchema = z.strictObject({
  title,
  href: z.string()
});
const separatorItemSchema = z.strictObject({
  type: z.literal("separator"),
  title
});
const menuItemSchema = z.union([
  stringOrElement,
  linkSchema,
  z.strictObject({ title: stringOrElement }),
  separatorItemSchema
]).transform(transformTitle);
const menuSchema = z.strictObject({
  type: z.literal("menu"),
  title,
  items: z.record(menuItemSchema).transform((obj) => {
    for (const key in obj) {
      obj[key].title ||= pageTitleFromFilename(key);
    }
    return obj;
  }),
  display: z.enum(["normal", "hidden"]).optional()
});
const itemSchema = z.strictObject({
  type: z.enum(["page", "doc"]).optional(),
  title,
  /**
   * An option to control how an item should be displayed in the sidebar:
   * - `normal`: the default behavior, item will be displayed
   * - `hidden`: the item will not be displayed in the sidebar entirely
   * - `children`: if the item is a folder, itself will be hidden but all its children will still be processed
   */
  display: z.enum(["normal", "hidden", "children"]).optional(),
  theme: pageThemeSchema.optional()
});
const metaSchema = z.union([
  stringOrElement.transform(transformTitle),
  itemSchema,
  linkSchema.extend({
    type: z.enum(["page", "doc"]).optional(),
    display: z.enum(["normal", "hidden"]).optional()
  }),
  separatorItemSchema,
  menuSchema
]);
function transformTitle(title2) {
  return typeof title2 === "string" || isValidElement(title2) ? { title: title2 } : title2;
}
export {
  element,
  itemSchema,
  mathJaxOptionsSchema,
  menuSchema,
  metaSchema,
  nextraConfigSchema,
  reactNode,
  separatorItemSchema
};
