import { DEFAULT_PROPERTY_PROPS } from "../constants.js";
var Mdx = /* @__PURE__ */ ((Mdx2) => {
  Mdx2["Wrapper"] = "MDXContent";
  Mdx2["Content"] = "_createMdxContent";
  return Mdx2;
})(Mdx || {});
const recmaRewrite = ({ isPageImport, isRemoteContent }) => (ast) => {
  const hasMdxLayout = ast.body.some(
    (node) => node.type === "VariableDeclaration" && node.kind === "const" && node.declarations[0].id.type === "Identifier" && node.declarations[0].id.name === "MDXLayout"
  );
  if (isRemoteContent) {
    if (hasMdxLayout) {
      return;
    }
    ast.body = ast.body.filter(
      (node) => node.type !== "FunctionDeclaration" || node.id.name !== "MDXContent" /* Wrapper */
    );
    const returnStatement = ast.body.find(
      (node) => node.type === "ReturnStatement"
    );
    const { properties } = returnStatement.argument;
    for (const node of properties) {
      if (node.type === "Property" && node.key.type === "Identifier" && node.key.name === "default" && node.value.type === "Identifier" && node.value.name === "MDXContent" /* Wrapper */) {
        node.value.name = "_createMdxContent" /* Content */;
        break;
      }
    }
    return;
  }
  const defaultExport = ast.body.find(
    (node) => node.type === "ExportDefaultDeclaration"
  );
  if (hasMdxLayout) {
    Object.assign(defaultExport, defaultExport.declaration);
    ast.body.unshift(HOC_IMPORT_AST);
    ast.body.push({
      type: "ExportDefaultDeclaration",
      declaration: createHocCallAst("MDXContent" /* Wrapper */)
    });
    return;
  }
  if (isPageImport) {
    ast.body.unshift(HOC_IMPORT_AST);
    defaultExport.declaration = createHocCallAst("_createMdxContent" /* Content */);
    return;
  }
  defaultExport.declaration = {
    type: "Identifier",
    name: "_createMdxContent" /* Content */
  };
};
const HOC_IMPORT_AST = {
  type: "ImportDeclaration",
  source: { type: "Literal", value: "nextra/setup-page" },
  specifiers: [
    {
      type: "ImportSpecifier",
      imported: { type: "Identifier", name: "HOC_MDXWrapper" },
      local: { type: "Identifier", name: "HOC_MDXWrapper" }
    }
  ]
};
function createHocCallAst(componentName) {
  return {
    type: "CallExpression",
    callee: { type: "Identifier", name: "HOC_MDXWrapper" },
    optional: false,
    arguments: [
      { type: "Identifier", name: componentName },
      {
        type: "ObjectExpression",
        properties: [
          {
            ...DEFAULT_PROPERTY_PROPS,
            shorthand: true,
            key: { type: "Identifier", name: "metadata" },
            value: { type: "Identifier", name: "metadata" }
          },
          {
            ...DEFAULT_PROPERTY_PROPS,
            shorthand: true,
            key: { type: "Identifier", name: "toc" },
            value: { type: "Identifier", name: "toc" }
          }
        ]
      }
    ]
  };
}
export {
  recmaRewrite
};
