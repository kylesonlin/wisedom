import { bundledLanguages, createHighlighter } from "shiki";
import { SKIP, visit } from "unist-util-visit";
const CODE_BLOCK_FILENAME_RE = /filename="([^"]+)"/;
const DEFAULT_REHYPE_PRETTY_CODE_OPTIONS = {
  keepBackground: false,
  grid: false,
  onVisitLine(node) {
    if (node.children.length === 0) {
      node.children.push({ type: "text", value: " " });
    }
    delete node.properties["data-line"];
  },
  theme: {
    light: "github-light",
    dark: "github-dark"
  },
  defaultLang: {
    block: "plaintext"
  },
  filterMetaString: (meta) => meta.replace(CODE_BLOCK_FILENAME_RE, ""),
  getHighlighter(opts) {
    const langs = Object.keys(bundledLanguages).filter((l) => l !== "mermaid");
    return createHighlighter({
      ...opts,
      // Without `getHighlighter` option ```mdx lang isn't highlighted
      langs
    });
  }
};
const rehypeParseCodeMeta = ({ defaultShowCopyCode }) => (ast) => {
  visit(ast, { tagName: "pre" }, (node) => {
    const [codeEl] = node.children;
    const { meta = "" } = codeEl.data || {};
    node.__filename = meta.match(CODE_BLOCK_FILENAME_RE)?.[1];
    node.properties["data-filename"] = node.__filename;
    node.__hasWordWrap = !meta.includes("word-wrap=false");
    if (node.__hasWordWrap) {
      node.properties["data-word-wrap"] = "";
    }
    node.__hasCopyCode = meta ? defaultShowCopyCode && !/( |^)copy=false($| )/.test(meta) || /( |^)copy($| )/.test(meta) : defaultShowCopyCode;
    if (node.__hasCopyCode) {
      node.properties["data-copy"] = "";
    }
  });
};
const rehypeAttachCodeMeta = ({ search }) => {
  const parseCodeblocks = typeof search === "object" ? search.codeblocks : search;
  return (ast) => {
    visit(
      ast,
      [{ tagName: "figure" }, { tagName: "span" }],
      (node) => {
        const isRehypePrettyCode = "data-rehype-pretty-code-figure" in node.properties;
        if (!isRehypePrettyCode) return;
        const preEl = Object.assign(node, node.children[0]);
        delete preEl.properties["data-theme"];
        if (preEl.tagName === "pre") {
          const codeEl = preEl.children[0];
          delete codeEl.properties["data-theme"];
          delete codeEl.properties["data-language"];
          if (preEl.__hasWordWrap) {
            preEl.properties["data-word-wrap"] = "";
          }
          if (preEl.__filename) {
            preEl.properties["data-filename"] = preEl.__filename;
          }
          if (preEl.__hasCopyCode) {
            preEl.properties["data-copy"] = "";
          }
          if (!parseCodeblocks) {
            preEl.properties["data-pagefind-ignore"] = "all";
          }
          return SKIP;
        }
        delete node.children[0].properties.className;
      }
    );
  };
};
export {
  DEFAULT_REHYPE_PRETTY_CODE_OPTIONS,
  rehypeAttachCodeMeta,
  rehypeParseCodeMeta
};
