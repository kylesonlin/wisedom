{"version":3,"file":"devErrorSymbolicationEventProcessor.js","sources":["../../../src/common/devErrorSymbolicationEventProcessor.ts"],"sourcesContent":["import type { Event, EventHint } from '@sentry/core';\nimport { GLOBAL_OBJ, logger, parseSemver, suppressTracing } from '@sentry/core';\nimport type { StackFrame } from 'stacktrace-parser';\nimport * as stackTraceParser from 'stacktrace-parser';\nimport { DEBUG_BUILD } from './debug-build';\n\ntype OriginalStackFrameResponse = {\n  originalStackFrame: StackFrame;\n  originalCodeFrame: string | null;\n  sourcePackage?: string;\n};\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryBasePath?: string;\n  next?: {\n    version?: string;\n  };\n};\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nexport async function devErrorSymbolicationEventProcessor(event: Event, hint: EventHint): Promise<Event | null> {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = event.spans?.filter(span => {\n      const httpUrlAttribute: unknown = span.data?.['http.url'];\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame'); // could also be __nextjs_original-stack-frames (plural)\n      }\n\n      return true;\n    });\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the\n  // entire event processor. Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n\n      const nextjsVersion = globalWithInjectedValues.next?.version || '0.0.0';\n      const parsedNextjsVersion = nextjsVersion ? parseSemver(nextjsVersion) : {};\n\n      let resolvedFrames: ({\n        originalCodeFrame: string | null;\n        originalStackFrame: StackFrame | null;\n      } | null)[];\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (parsedNextjsVersion.major! > 15 || (parsedNextjsVersion.major === 15 && parsedNextjsVersion.minor! >= 2)) {\n        const r = await resolveStackFrames(frames);\n        if (r === null) {\n          return event;\n        }\n        resolvedFrames = r;\n      } else {\n        resolvedFrames = await Promise.all(\n          frames.map(frame => resolveStackFrame(frame, hint.originalException as Error)),\n        );\n      }\n\n      if (event.exception?.values?.[0]?.stacktrace?.frames) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map(\n          (frame, i, frames) => {\n            const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n            if (!resolvedFrame?.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n              return {\n                ...frame,\n                platform: frame.filename?.startsWith('node:internal') ? 'nodejs' : undefined, // simple hack that will prevent a source mapping error from showing up\n                in_app: false,\n              };\n            }\n\n            const { contextLine, preContextLines, postContextLines } = parseOriginalCodeFrame(\n              resolvedFrame.originalCodeFrame,\n            );\n\n            return {\n              ...frame,\n              pre_context: preContextLines,\n              context_line: contextLine,\n              post_context: postContextLines,\n              function: resolvedFrame.originalStackFrame.methodName,\n              filename: resolvedFrame.originalStackFrame.file || undefined,\n              lineno: resolvedFrame.originalStackFrame.lineNumber || undefined,\n              colno: resolvedFrame.originalStackFrame.column || undefined,\n            };\n          },\n        );\n      }\n    }\n  } catch (e) {\n    return event;\n  }\n\n  return event;\n}\n\nasync function resolveStackFrame(\n  frame: StackFrame,\n  error: Error,\n): Promise<{ originalCodeFrame: string | null; originalStackFrame: StackFrame | null } | null> {\n  try {\n    if (!(frame.file?.startsWith('webpack-internal:') || frame.file?.startsWith('file:'))) {\n      return null;\n    }\n\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, (frame[key as keyof typeof frame] ?? '').toString());\n    });\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await suppressTracing(() =>\n      fetch(\n        `${\n          // eslint-disable-next-line no-restricted-globals\n          typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n        }${basePath}/__nextjs_original-stack-frame?${params.toString()}`,\n        {\n          signal: controller.signal,\n        },\n      ).finally(() => {\n        clearTimeout(timer);\n      }),\n    );\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body: OriginalStackFrameResponse = await res.json();\n\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame,\n    };\n  } catch (e) {\n    DEBUG_BUILD && logger.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nasync function resolveStackFrames(\n  frames: StackFrame[],\n): Promise<{ originalCodeFrame: string | null; originalStackFrame: StackFrame | null }[] | null> {\n  try {\n    const postBody = {\n      frames: frames\n        .filter(frame => {\n          return !!frame.file;\n        })\n        .map(frame => {\n          // https://github.com/vercel/next.js/blob/df0573a478baa8b55478a7963c473dddd59a5e40/packages/next/src/client/components/react-dev-overlay/server/middleware-turbopack.ts#L129\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          frame.file = frame.file!.replace(/^rsc:\\/\\/React\\/[^/]+\\//, '').replace(/\\?\\d+$/, '');\n\n          return {\n            file: frame.file,\n            methodName: frame.methodName ?? '<unknown>',\n            arguments: [],\n            lineNumber: frame.lineNumber ?? 0,\n            column: frame.column ?? 0,\n          };\n        }),\n      isServer: false,\n      isEdgeServer: false,\n      isAppDirectory: true,\n    };\n\n    let basePath = process.env._sentryBasePath ?? globalWithInjectedValues._sentryBasePath ?? '';\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n\n    const res = await fetch(\n      `${\n        // eslint-disable-next-line no-restricted-globals\n        typeof window === 'undefined' ? 'http://localhost:3000' : '' // TODO: handle the case where users define a different port\n      }${basePath}/__nextjs_original-stack-frames`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: controller.signal,\n        body: JSON.stringify(postBody),\n      },\n    ).finally(() => {\n      clearTimeout(timer);\n    });\n\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n\n    const body: { value: OriginalStackFrameResponse }[] = await res.json();\n\n    return body.map(frame => {\n      return {\n        originalCodeFrame: frame.value.originalCodeFrame,\n        originalStackFrame: frame.value.originalStackFrame,\n      };\n    });\n  } catch (e) {\n    DEBUG_BUILD && logger.error('Failed to symbolicate event with Next.js dev server', e);\n    return null;\n  }\n}\n\nfunction parseOriginalCodeFrame(codeFrame: string): {\n  contextLine: string | undefined;\n  preContextLines: string[];\n  postContextLines: string[];\n} {\n  const preProcessedLines = codeFrame\n    // Remove ASCII control characters that are used for syntax highlighting\n    .replace(\n      // eslint-disable-next-line no-control-regex\n      /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, // https://stackoverflow.com/a/29497680\n      '',\n    )\n    .split('\\n')\n    // Remove line that is supposed to indicate where the error happened\n    .filter(line => !line.match(/^\\s*\\|/))\n    // Find the error line\n    .map(line => ({\n      line,\n      isErrorLine: !!line.match(/^>/),\n    }))\n    // Remove the leading part that is just for prettier output\n    .map(lineObj => ({\n      ...lineObj,\n      line: lineObj.line.replace(/^.*\\|/, ''),\n    }));\n\n  const preContextLines = [];\n  let contextLine: string | undefined = undefined;\n  const postContextLines = [];\n\n  let reachedContextLine = false;\n\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines,\n  };\n}\n"],"names":["GLOBAL_OBJ","parseSemver","suppressTracing","DEBUG_BUILD","logger"],"mappings":"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"}