"use client"

import * as React from "react"
import {
  Activity,
  BarChart3,
  Calendar,
  ChevronsLeft,
  ChevronsRight,
  CreditCard,
  Home,
  Inbox,
  Layout,
  LayoutDashboard,
  List,
  Menu,
  MessageSquare,
  Network,
  Package,
  Settings,
  User,
  Users,
} from "lucide-react"
import Link from "next/link"
import { useIsMobile } from "../../hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/Button"
import { Input } from "@/components/ui/Input"
import { Separator } from "@/components/ui/Separator"
import { Sheet, SheetContent } from "@/components/ui/Sheet"
import { ScrollArea } from "@/components/ui/ScrollArea"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/Tooltip"

interface SidebarContextType {
  expanded: boolean
  toggleSidebar: () => void
}

// Create a default context value to avoid undefined
const defaultContextValue: SidebarContextType = {
  expanded: true,
  toggleSidebar: () => {},
}

// Change the SidebarContext export to make it accessible
export const SidebarContext = React.createContext<SidebarContextType>(defaultContextValue)

export function useSidebar() {
  const context = React.useContext(SidebarContext)
  // Return the context directly since it now has a default value
  return context
}

// Create a separate SidebarProvider component
export function SidebarProvider({ children }: { children: React.ReactNode }) {
  const [expanded, setExpanded] = React.useState(true)

  const toggleSidebar = React.useCallback(() => {
    setExpanded((prev) => !prev)
  }, [])

  // Create a memoized context value to prevent unnecessary re-renders
  const contextValue = React.useMemo(() => {
    return { expanded, toggleSidebar }
  }, [expanded, toggleSidebar])

  return <SidebarContext.Provider value={contextValue}>{children}</SidebarContext.Provider>
}

// Modify the DashboardSidebar component to use the context but not create it
export function DashboardSidebar() {
  const { expanded, toggleSidebar } = useSidebar()

  return (
    <aside
      className={`fixed inset-y-0 left-0 z-20 flex h-full flex-col border-r bg-white transition-all duration-300 ${
        expanded ? "w-64" : "w-16"
      } md:relative`}
    >
      <div className="flex h-16 items-center justify-between border-b px-4">
        <Link href="/" className="flex items-center gap-2">
          {expanded ? <span className="text-xl font-bold">Wisedom</span> : <span className="text-xl font-bold">W</span>}
        </Link>
        <Button variant="ghost" size="icon" onClick={toggleSidebar} className="hidden md:flex">
          {expanded ? <ChevronsLeft className="h-5 w-5" /> : <ChevronsRight className="h-5 w-5" />}
        </Button>
      </div>
      <ScrollArea className="flex-1 py-2">
        <nav className="grid gap-1 px-2">
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <Home className="h-5 w-5" />
                    {expanded && <span className="ml-2">Home</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Home</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="secondary"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <LayoutDashboard className="h-5 w-5" />
                    {expanded && <span className="ml-2">Dashboard</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Dashboard</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <Network className="h-5 w-5" />
                    {expanded && <span className="ml-2">Network</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Network</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <Users className="h-5 w-5" />
                    {expanded && <span className="ml-2">Contacts</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Contacts</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <Calendar className="h-5 w-5" />
                    {expanded && <span className="ml-2">Calendar</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Calendar</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <MessageSquare className="h-5 w-5" />
                    {expanded && <span className="ml-2">Messages</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Messages</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <BarChart3 className="h-5 w-5" />
                    {expanded && <span className="ml-2">Analytics</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Analytics</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  className={`flex h-10 justify-start ${expanded ? "px-4" : "justify-center px-0"}`}
                  asChild
                >
                  <Link href="#">
                    <Settings className="h-5 w-5" />
                    {expanded && <span className="ml-2">Settings</span>}
                  </Link>
                </Button>
              </TooltipTrigger>
              {!expanded && <TooltipContent side="right">Settings</TooltipContent>}
            </Tooltip>
          </TooltipProvider>
        </nav>
      </ScrollArea>
    </aside>
  )
}
